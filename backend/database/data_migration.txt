-- Create the user_profiles table
CREATE TABLE IF NOT EXISTS user_profiles (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id),
    name TEXT,
    email TEXT,
    phone TEXT,
    experience TEXT,
    education TEXT,
    skills TEXT,
    resume_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
);

-- Create an index on user_id for faster lookups
CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);

-- Enable Row Level Security (RLS)
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- Create policy to allow users to read their own profile
CREATE POLICY "Users can view own profile" ON user_profiles
    FOR SELECT USING (auth.uid() = user_id);

-- Create policy to allow users to update their own profile
CREATE POLICY "Users can update own profile" ON user_profiles
    FOR UPDATE USING (auth.uid() = user_id);

-- Create policy to allow users to insert their own profile
CREATE POLICY "Users can insert own profile" ON user_profiles
    FOR INSERT WITH CHECK (auth.uid() = user_id);


CREATE TABLE IF NOT EXISTS jobs (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    title TEXT NOT NULL,
    company TEXT NOT NULL,
    description TEXT NOT NULL,
    location TEXT NOT NULL,
    salary TEXT NOT NULL,
    type TEXT NOT NULL DEFAULT 'Full-time',
    keywords TEXT[],
    applicants INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
);

-- Enable Row Level Security (RLS)
ALTER TABLE jobs ENABLE ROW LEVEL SECURITY;

-- Create policy to allow all authenticated users to view jobs
CREATE POLICY "Anyone can view jobs" ON jobs
    FOR SELECT USING (true);

-- Create policy to allow authenticated users to insert jobs
CREATE POLICY "Authenticated users can insert jobs" ON jobs
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Create policy to allow authenticated users to update jobs
CREATE POLICY "Authenticated users can update jobs" ON jobs
    FOR UPDATE USING (auth.role() = 'authenticated');

-- Create policy to allow authenticated users to delete jobs
CREATE POLICY "Authenticated users can delete jobs" ON jobs
    FOR DELETE USING (auth.role() = 'authenticated');



-- Create jobs table with enhanced fields
CREATE TABLE public.jobs (
  id UUID NOT NULL DEFAULT gen_random_uuid(),
  position TEXT NOT NULL,
  description TEXT NOT NULL,
  company TEXT NOT NULL,
  location TEXT NOT NULL,
  salary TEXT NOT NULL,
  last_date_to_apply DATE NOT NULL,
  requirements TEXT,
  hr_user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  PRIMARY KEY (id)
);

-- Create job applications table
CREATE TABLE public.job_applications (
  id UUID NOT NULL DEFAULT gen_random_uuid(),
  job_id UUID NOT NULL REFERENCES public.jobs(id) ON DELETE CASCADE,
  candidate_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  status TEXT NOT NULL DEFAULT 'applied' CHECK (status IN ('applied', 'reviewing', 'interviewed', 'rejected', 'accepted')),
  resume_url TEXT,
  cover_letter TEXT,
  match_percentage INTEGER DEFAULT 0,
  skills TEXT,
  experience_years INTEGER DEFAULT 0,
  applied_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  PRIMARY KEY (id),
  UNIQUE(job_id, candidate_id)
);

-- Enable Row Level Security
ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.job_applications ENABLE ROW LEVEL SECURITY;

-- RLS Policies for jobs
CREATE POLICY "Anyone can view active jobs" ON public.jobs
  FOR SELECT USING (is_active = true);

CREATE POLICY "HR users can insert jobs" ON public.jobs
  FOR INSERT WITH CHECK (auth.uid() = hr_user_id);

CREATE POLICY "HR users can update their own jobs" ON public.jobs
  FOR UPDATE USING (auth.uid() = hr_user_id);

CREATE POLICY "HR users can view their own jobs" ON public.jobs
  FOR SELECT USING (auth.uid() = hr_user_id OR is_active = true);

-- RLS Policies for job applications
CREATE POLICY "Candidates can view their own applications" ON public.job_applications
  FOR SELECT USING (auth.uid() = candidate_id);

CREATE POLICY "HR users can view applications for their jobs" ON public.job_applications
  FOR SELECT USING (
    auth.uid() IN (
      SELECT hr_user_id FROM public.jobs WHERE id = job_id
    )
  );

CREATE POLICY "Candidates can insert their own applications" ON public.job_applications
  FOR INSERT WITH CHECK (auth.uid() = candidate_id);

CREATE POLICY "HR users can update applications for their jobs" ON public.job_applications
  FOR UPDATE USING (
    auth.uid() IN (
      SELECT hr_user_id FROM public.jobs WHERE id = job_id
    )
  );



-- Create candidate profiles table to store additional profile data
CREATE TABLE public.candidate_profiles (
  id UUID NOT NULL DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  phone TEXT,
  experience_years INTEGER DEFAULT 0,
  education TEXT,
  skills TEXT,
  resume_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  PRIMARY KEY (id),
  UNIQUE(user_id)
);

-- Enable Row Level Security
ALTER TABLE public.candidate_profiles ENABLE ROW LEVEL SECURITY;

-- RLS Policies for candidate profiles
CREATE POLICY "Users can view their own profile" ON public.candidate_profiles
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own profile" ON public.candidate_profiles
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own profile" ON public.candidate_profiles
  FOR UPDATE USING (auth.uid() = user_id);


-- First, make sure the bucket exists and is public
insert into storage.buckets (id, name, public)
values ('resumes', 'resumes', true)
on conflict (id) do update set public = true;

-- Allow candidates to upload their own resumes
create policy "Candidates can upload their own resumes"
on storage.objects for insert
with check (
  bucket_id = 'resumes' AND
  auth.uid()::text = (storage.foldername(name))[1]
);

-- Allow candidates to update their own resumes
create policy "Candidates can update their own resumes"
on storage.objects for update
using (
  bucket_id = 'resumes' AND
  auth.uid()::text = (storage.foldername(name))[1]
);

-- Allow candidates to delete their own resumes
create policy "Candidates can delete their own resumes"
on storage.objects for delete
using (
  bucket_id = 'resumes' AND
  auth.uid()::text = (storage.foldername(name))[1]
);

-- Allow both candidates and HR to view resumes
create policy "Anyone can view resumes"
on storage.objects for select
using (bucket_id = 'resumes');

-- Allow candidates to list their own resumes
create policy "Candidates can list their own resumes"
on storage.objects for select
using (
  bucket_id = 'resumes' AND
  auth.uid()::text = (storage.foldername(name))[1]
);


ALTER TABLE public.candidate_profiles ADD COLUMN IF NOT EXISTS resume_content TEXT;

-- Enable RLS
ALTER TABLE job_applications ENABLE ROW LEVEL SECURITY;

-- Create policy to allow updates to match_percentage
CREATE POLICY "Allow updates to match_percentage"
ON job_applications
FOR UPDATE
USING (true)
WITH CHECK (true);

-- Create policy to allow inserts
CREATE POLICY "Allow inserts to job_applications"
ON job_applications
FOR INSERT
WITH CHECK (true);

-- Create policy to allow selects
CREATE POLICY "Allow selects from job_applications"
ON job_applications
FOR SELECT
USING (true);